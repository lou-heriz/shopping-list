import { ShoppingItemType } from '../types';

// Largely generated by AI, with some manual adjustments
class ShoppingListApi {
    private static instance: ShoppingListApi;
    private listUrl = '/api/shopping-list';
    private itemUrl = '/api/shopping-list/item';

    private constructor() { }

    static getInstance(): ShoppingListApi {
        if (!ShoppingListApi.instance) {
            ShoppingListApi.instance = new ShoppingListApi();
        }
        return ShoppingListApi.instance;
    }

    private async makeRequest<T>(
        url: string,
        options: RequestInit = {}
    ): Promise<T> {
        const response = await fetch(url, {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
            ...options,
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        return response.json();
    }

    async getAllItems(): Promise<ShoppingItemType[]> {
        return this.makeRequest<ShoppingItemType[]>(this.listUrl);
    }

    async addItem(item: ShoppingItemType): Promise<ShoppingItemType> {
        return this.makeRequest<ShoppingItemType>(this.itemUrl, {
            method: 'POST',
            body: JSON.stringify(item)
        });
    }

    async updateItem(item: ShoppingItemType): Promise<ShoppingItemType> {
        return this.makeRequest<ShoppingItemType>(this.itemUrl, {
            method: 'PATCH',
            body: JSON.stringify(item),
        });
    }

    async deleteItem(id: string): Promise<{ success: boolean }> {
        return this.makeRequest<{ success: boolean }>(this.itemUrl, {
            method: 'DELETE',
            body: JSON.stringify({ id }),
        });
    }

    async togglePurchased(item: ShoppingItemType): Promise<ShoppingItemType> {
        const updatedItem = { ...item, purchased: !item.purchased };
        return this.updateItem(updatedItem);
    }
}

export const shoppingListApi = ShoppingListApi.getInstance();
