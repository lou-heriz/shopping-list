import type { ShoppingItemType } from '../../app/types';

// Generated by AI
describe('API Routes - Shopping Items', () => {

    beforeEach(() => {
        cy.task('resetDatabase').then(() => {})
    })

    describe('GET /api/shopping-list', () => {
        it('should return initial shopping items from test database', () => {
            cy.request('GET', '/api/shopping-list')
                .then((response) => {
                    expect(response.status).to.eq(200)
                    expect(response.body).to.be.an('array')
                    expect(response.body).to.have.length(7)
                    expect(response.body[0]).to.deep.include({
                        id: "0",
                        name: 'Milk',
                        price: 1,
                        purchased: false
                    })
                })
        })
    })

    describe('POST /api/shopping-list/item', () => {
        it('should create a new shopping item in test database', () => {
            const newItem = {
                id: "999",
                name: 'Test Bread',
                price: 2.50,
                purchased: false
            }

            cy.request('POST', '/api/shopping-list/item', newItem)
                .then((response) => {
                    expect(response.status).to.eq(201)
                    expect(response.body).to.deep.include(newItem)
                })

            cy.request('GET', '/api/shopping-list')
                .then((response) => {
                    expect(response.body).to.have.length(8)
                    expect(response.body).to.deep.include(newItem)
                })
        })
    })

    describe('PATCH /api/shopping-list/item', () => {
        it('should update an existing item in test database', () => {
            const updatedItem = {
                id: "0",
                name: 'Milk',
                price: 1,
                purchased: true
            }

            cy.request('PATCH', '/api/shopping-list/item', updatedItem)
                .then((response) => {
                    expect(response.status).to.eq(200)
                    expect(response.body).to.deep.include(updatedItem)
                })

            cy.request('GET', '/api/shopping-list')
                .then((response) => {
                    const milk = response.body.find((item: ShoppingItemType) => item.id === "0")
                    expect(milk.purchased).to.equal(true)
                })
        })
    })

    describe('DELETE /api/shopping-list/item', () => {
        it('should delete an existing item from test database', () => {
            cy.request('DELETE', '/api/shopping-list/item', { id: "1" })
                .then((response) => {
                    expect(response.status).to.eq(200)
                    expect(response.body.success).to.equal(true)
                })

            cy.request('GET', '/api/shopping-list')
                .then((response) => {
                    expect(response.body).to.have.length(6)
                })
        })
    })

    describe('POST /api/shopping-list', () => {
        it('should update the order of items in test database', () => {
            const newOrder = [
                { id: "1", name: 'Milk', price: 1, purchased: false },
                { id: "999", name: 'Test Bread', price: 2.50, purchased: false }
            ]

            cy.request('POST', '/api/shopping-list', newOrder)
                .then((response) => {
                    expect(response.status).to.eq(201)
                })

            cy.request('GET', '/api/shopping-list')
                .then((response) => {
                    expect(response.body).to.deep.equal(newOrder)
                })
        })
    })
});